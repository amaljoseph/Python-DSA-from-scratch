class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:

    def __init__(self):
        self.head = None

    def insert(self, data):
        new_node = Node(data)
        new_node.next = None
        node = self.head
        
        if node == None:
            self.head = new_node
        else:
            while node.next != None:
                node = node.next
            node.next = new_node

    def insertAt(self, index, data):
        new_node = Node(data)
        node = self.head

        position = 1
        if index == 1:
            new_node.next = self.head
            self.head = new_node
        else:
            while node.next and position<index:
                node = node.next
            new_node.next = node.next
            node.next = new_node

    def insertAfter(self, val, data):
        new_node = Node(data)
        node = self.head

        while node.next and node.data != val:
            node = node.next
        new_node.next = node.next
        node.next = new_node

    def delete(self, data):
        node = self.head
        previous = None
        while node.data != data and node.next:
            previous = node
            node = node.next
        if node.data == data:
            print("Deleted {}".format(node.data))
            previous.next = node.next
        else:
            print("{} not found".format(data))
    
    def deleteAt(self, index):
        node = self.head
        position = 1

        if index == 1:
            self.head = node.next

        else:
            while node.next and position<index:
                node = node.next
            node.next = node.next.next

            

    def showlist(self):
        node = self.head
        while node.next:
            print(node.data)
            node = node.next
        print(node.data)

list = LinkedList()
list.insert(1)
list.insert(2)
list.insert(3)
list.insertAt(1, 100)
list.insertAfter(1, 200)
list.deleteAt(1)
list.showlist()
list.delete(200)
list.showlist()
